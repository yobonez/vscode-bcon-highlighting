{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Language for Konfiguration Object Notation",
	"patterns": [
		{
			"include": "#multiline_comment"
		},
		{
			"include": "#var_expr_str_double_quote"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#braces"
		},
		{
			"include": "#var-expr"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#importuseas_str_double_quote"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#regexp"
		}
	],
	"repository": {
		"multiline_comment": {
			"contentName": "comment.block.lkon",
			"begin": "'",
			"beginCaptures": {
				"0": {"name": "punctuation.definition.comment.lkon"}
			},
			"end": "'",
			"endCaptures": {
				"0": {"name": "punctuation.definition.comment.lkon"}
			}
			
		},

		"var_expr_str_double_quote": {
			"contentName": "meta.var.expr.lkon",
			"begin": "(?<==>.*)\"",
			"beginCaptures": {
				"0": {"name": "punctuation.definition.string.begin.lkon"}
			},
			"end": "\"",
			"endCaptures": {
				"0": {"name": "punctuation.definition.string.end.lkon"}
			},
			"name": "string.quoted.double.lkon",
			"patterns": [
				{
					"name": "meta.template.expression.lkon",
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.begin.lkon"
						}
					},
					"patterns": [
						{
							"name":"meta.template.expression.lkon",
							"match":"(\\b(Main)\\b(\\.)|([_a-zA-Z][_a-zA-Z0-9]*)(\\.))|([_a-zA-Z0-9]*)(\\.)*",
							"captures":{
								"2": {"name": "variable.language.main.lkon"},
								"3": {"name": "puntuation.accessor.dot.lkon"},
								"4": {"name": "variable.other.object"},
								"5": {"name": "puntuation.accessor.dot.lkon"},
								"6": {"name": "variable.other.object"},
								"7": {"name": "puntuation.accessor.dot.lkon"}
							}
						}
					],
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.end.lkon"
						}
					},
					"contentName": "meta.embedded.line.lkon"
				},
				{
					"name": "constant.character.escape.lkon",
					"match": "(?=.*\"date)([-:.])|(\\\\u[0-9A-Fa-f]{4})|(\\\\.)|(\\\\\")"
				}
			]
		},

		"comments": {
			"patterns": [{
				"name":"comment.line.lkon",
				"match": "#[^\n\r]*"
			}]
		},
		"braces": {
            "patterns": [{
                "name":"meta.brace.square.lkon",
                "match":"(\\[|\\])"
            }]
        },
		"var-expr": {
			"patterns": [
				{
					"name":"meta.var.expr.lkon",
					"match": "(@\\*|@)(\\b([a-zA-Z_][a-zA-Z0-9_]+)\\b)?",
					"captures": {
						"1": {"name": "storage.type.lkon"},
						"2": {"name": "variable.name.lkon"}
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match":"(=>)",
					"captures": {
						"1":{"name": "keyword.operator.assignment.lkon"}
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match":"(?<==>.*)(?<!\".*)((\\b(Main)\\b|(\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b))(\\.)){1}(([a-zA-Z0-9_]*)(\\.)?)*",
					"captures":{
						"3": {"name": "variable.language.main.lkon"},
						"4": {"name": "variable.other.object"},
						"6": {"name": "puntuation.accessor.lkon"},
						"7": {"name": "variable.other.property.lkon"}
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match":"(?<==>.*)\\b(Infinity|Undefined|Null|NaN|True|False)\\b",
					"captures":{
						"1":{"name":"constant.language.lkon"}	
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match": "(?<==>.*)(-)?(0x[A-Fa-f0-9]*)|(0b[0-1]*)|(0o[0-7]*)",
					"captures": {
						"1": {"name":"keyword.operator.arithmetic"},
						"2": {"name": "constant.numeric.hexadecimal.lkon"},
						"3": {"name": "constant.numeric.binary.lkon"},
						"4": {"name": "constant.numeric.octagonal.lkon"}
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match": "(?<==>.*)(-)?(\\.)?\\b((\\d*_)*\\d*(\\.\\d*)?(e[\\+\\-]\\d*)?)(n)?\\b",
					"captures": {
						"1": {"name":"keyword.operator.arithmetic"},
						"2": {"name":"constant.numeric.decimal.lkon"},
						"3": {"name":"constant.numeric.decimal.lkon"},
						"7": {"name":"constant.numeric.decimal.lkon"}
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match": "(?<==>.*)(?<=\".*\")(\\.)(date|ascii|base64|base64url|hex|ucs2|ucs-2|utf16le|utf-16le|utf8|utf-8|bin|binary|latin1)",
					"captures": {
						"1": {"name": "keyword.other.encoding.lkon"},
						"2": {"name": "keyword.other.encoding.lkon"}
					}
				},
				{
					"name":"meta.var.expr.lkon",
					"match": "(?<==>.*)(/)(.*)(/)([dgimsuvy]*)",
					"captures": {
						"1":{"name":"string.regexp.lkon", "patterns": [{"name":"punctuation.definition.string.begin.lkon", "match":"/"}]},
						"2":{"name": "string.regexp.lkon"},
						"3":{"name":"string.regexp.lkon", "patterns": [{"name":"punctuation.definition.string.end.lkon", "match":"/"}]},
						"4":{"name": "keyword.other.lkon"}
					}
				}
			]
		},
		"importuseas_str_double_quote": {
			"contentName": "meta.importuseas.lkon",
			"begin": "(?<=use.*|as.*|import.*)\"",
			"beginCaptures": {
				"0": {"name": "punctuation.definition.string.begin.lkon"}
			},
			"end": "\"",
			"endCaptures": {
				"0": {"name": "punctuation.definition.string.end.lkon"}
			},
			"name": "string.quoted.double.lkon",
			"patterns": [
				{
					"name": "constant.character.escape.lkon",
					"match": "(?=.*\"\\.date)([-:.])|(\\\\u[0-9A-Fa-f]{4})|(\\\\.)|(\\\\\")"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name":"meta.importuseas.lkon",
					"match":"\\b(^import|^use|as)\\b",
					"captures": {
						"1":{"name":"keyword.control.lkon"}
					}
				},
				{
					"name":"meta.importuseas.lkon",
					"match":"(?<=(import|use|as) *)\\b(Infinity|Undefined|Null|NaN|True|False)\\b",
					"captures":{
						"2":{"name":"constant.language.lkon"}	
					}
				},
				{
					"name":"meta.importuseas.lkon",
					"match": "(?<=use *|as *) (-)?(0x[A-Fa-f0-9]*)|(0b[0-1]*)|(0o[0-7]*)",
					"captures": {
						"1": {"name":"keyword.operator.arithmetic"},
						"2": {"name": "constant.numeric.hexadecimal.lkon"},
						"3": {"name": "constant.numeric.binary.lkon"},
						"4": {"name": "constant.numeric.octagonal.lkon"}
					}
				},
				{
					"name":"meta.importuseas.lkon",
					"match":"(?<=use *|as *) (-)?(\\.)?\\b((\\d*_)*\\d*(\\.\\d*)?(e[\\+\\-]\\d*)?)(n)?\\b",
					"captures": {
						"1": {"name":"keyword.operator.arithmetic"},
						"2": {"name":"constant.numeric.decimal.lkon"},
						"3": {"name":"constant.numeric.decimal.lkon"},
						"7": {"name":"constant.numeric.decimal.lkon"}
					}
				},
				{
					"name":"meta.importuseas.lkon",
					"match":"(?<=(use|import).*\".*\")(\\.)(date|ascii|base64|base64url|hex|ucs2|ucs-2|utf16le|utf-16le|utf8|utf-8|bin|binary|latin1)",
					"captures": {
						"2": {"name": "keyword.other.encoding.lkon"},
						"3": {"name": "keyword.other.encoding.lkon"}
					}
				},
				{
					"name":"meta.importuseas.lkon",
					"match": "(?<=(import|use|as) )(/)(.*)(/)([dgimsuvy]*)",
					"captures": {
						"2":{"name":"string.regexp.lkon", "patterns": [{"name":"punctuation.definition.string.begin.lkon", "match":"/"}]},
						"3":{"name": "string.regexp.lkon"},
						"4":{"name":"string.regexp.lkon", "patterns": [{"name":"punctuation.definition.string.end.lkon", "match":"/"}]},
						"5":{"name": "keyword.other.lkon"}
					}
				},
				{
					"name":"meta.importuseas.lkon",
					"match": "(?<=as )(\\b([a-zA-Z_][a-zA-Z0-9_]+)\\b)?",
					"captures": {
						"1": {"name": "variable.name.lkon"}
					}
				}
			]
		},

		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.terminator.statement.lkon",
					"match": ";"
				}
			]
		}
	},
	"scopeName": "source.lkon"
}